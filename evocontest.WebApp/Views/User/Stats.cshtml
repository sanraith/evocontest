@using evocontest.Runner.Common.Extensions;
@using evocontest.WebApp.Common.Data;

@model evocontest.WebApp.ViewModels.StatsViewModel
@{
    ViewData["Title"] = "Statisztikák";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Head
{
    <style>
        p, h2 {
            margin-top: 2em;
        }

        .table th, .table td {
            padding-left: 0.75rem;
            padding-right: 0.75rem;
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
        }
    </style>
    <script src="~/lib/chart.js/Chart.min.js"></script>
    <script>
        function copySeedToClipboard(seed, level) {
            if (seed == '') { return; }
            var dummy = document.createElement("input");
            document.body.appendChild(dummy);
            dummy.setAttribute("id", "dummy_id");
            document.getElementById("dummy_id").value = seed;
            dummy.select();
            document.execCommand("copy");
            document.body.removeChild(dummy);

            document.getElementById("seedExample").innerHTML = seed;
            document.getElementById("levelExample").innerHTML = level;

            alert("A bemenethez tartozó \"Seed\" vágólapra másolva: " + seed);
        }

        function renderStandingsChart(chartId) {
            var chartColors = "#e6194B, #3cb44b, #ffe119, #4363d8, #f58231, #911eb4, #42d4f4, #f032e6, #bfef45, #fabebe, #469990, #e6beff, #9A6324, #fffac8, #800000, #aaffc3, #808000, #ffd8b1, #000075, #a9a9a9, #000000, #e6194B, #3cb44b, #ffe119, #4363d8, #f58231, #911eb4, #42d4f4, #f032e6, #bfef45, #fabebe, #469990, #e6beff, #9A6324, #fffac8, #800000, #aaffc3, #808000, #ffd8b1, #000075, #a9a9a9, #000000".split(", ");
            var labels = $("#speedTable" + chartId + " input[name=roundIndex]").map((_, x) => $(x).val()).toArray();
            var scores = $("#speedTable" + chartId + " input[name=totalTime]").map((_, x) => $(x).val()).toArray();

            var ctx = document.getElementById("speedChart" + chartId).getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Nehézségi szintek megoldási ideje (ms)',
                        data: scores,
                        borderWidth: 1,
                        backgroundColor: chartColors
                    }, {
                        label: '',
                        type: 'line',
                        pointHoverRadius: 0,
                        pointRadius: 0,
                        borderColor: "#000000",
                        fill: null,
                        data: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000]
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            //type: "logarithmic",
                            ticks: {
                                beginAtZero: true,
                            }
                        }]
                    },
                    legend: {
                        labels: {
                            boxWidth: 0
                        }
                    }
                }
            });
        }
    </script>
}

<h1>Statisztikák</h1>

@if (!Model.Measurements.Any())
{
    <p>
        Itt fognak megjelenni a megoldásodhoz kapcsolódó részletes statisztikák, miután legalább egy napi rangsorolásban részt vettél.
    </p>
}
else
{
    <p>
        Itt találod a napi rangsorolásokon elért részletes eredményeidet.<br />
    </p>
    foreach (var (measurement, measurementIndex) in Model.Measurements.OrderByDescending(x => x.Match.MatchDate).WithIndex())
    {
        var rounds = measurement.MeasurementResult.Rounds.TakeLast(8).ToList();
        <h2>Rangsor - @measurement.Match.MatchDate.ToString("MM.dd.")</h2>
        <div style="display: flex">
            <div style="flex: 75%">
                <table id="speedTable@(measurementIndex)" class="table table-hover table-bordered" cellpadding="2" style="width:auto">
                    <tr>
                        <th style="text-align: center;">#</th>
                        @foreach (var round in rounds)
                        {
                            string timeString;
                            if (round.Error == null)
                            {
                                if (round.SplitMilliseconds.Length < 20)
                                {
                                    round.TotalMilliseconds = (20.0 / round.SplitMilliseconds.Length) * round.TotalMilliseconds;
                                    timeString = $"~{(round.TotalMilliseconds / 1000.0).ToString("0.00")} s";
                                }
                                else
                                {
                                    timeString = $"{round.TotalMilliseconds.ToString("0")} ms";
                                }
                            }
                            else
                            {
                                timeString = "hibás eredmény";
                            }
                            <th style="text-align: center">
                                lvl @round.DifficultyLevel<br />(@timeString)
                                <div style="display: none">
                                    <input name="roundIndex" type="text" value="@(round.DifficultyLevel)" />
                                    <input name="totalTime" type="text" value="@(round.Error == null ? round.TotalMilliseconds : 0)" />
                                </div>
                            </th>
                        }
                    </tr>
                    @{var maxIndex = rounds.Max(x => x.SplitMilliseconds.Length); }
                    @for (int index = 0; index < maxIndex; index++)
                    {
                        <tr>
                            <td style="text-align: right">@index</td>
                            @foreach (var round in rounds)
                            {
                                var timeString = round.SplitMilliseconds.Length > index ? round.SplitMilliseconds[index].ToString("0.00") + " ms" : "-";
                                var config = round.GeneratorConfigs.Length > index ? round.GeneratorConfigs[index] : null;
                                var seed = config?.Seed.ToString();
                                <td onclick="copySeedToClipboard('@seed', '@round.DifficultyLevel')" style="text-align: right; cursor: @(seed == null ? "default" : "pointer")">
                                    @if (round.Error != null && index == round.SplitMilliseconds.Length - 1)
                                    {
                                        <span class="text-danger">@timeString (hibás eredmény)</span>
                                    }
                                    else
                                    {
                                        @timeString
                                    }
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
            <div style="flex: 25%; margin-left: 1em">
                <canvas id="speedChart@(measurementIndex)" height="300" width="200" />
            </div>
            <script>
                renderStandingsChart("@(Html.Raw(measurementIndex))");
            </script>
        </div>
        @if (measurementIndex == 0)
        {
            <p>
                Egy cellára kattintva vágólapra másolhatod az adott bemeneti adathoz tartozó "Seed"-et, így a bemeneteket a saját környezetedben is kipróbálhatod:
                <!-- HTML generated using hilite.me -->
                <div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin: 0; line-height: 125%"><span style="color: #888888">// using evocontest.Runner.Common.Generator;</span>

<span style="color: #333399; font-weight: bold">var</span> seed = <span style="color: #6600EE; font-weight: bold"><span id="seedExample">930969440</span></span>;
<span style="color: #333399; font-weight: bold">var</span> difficultyLevel = <span style="color: #6600EE; font-weight: bold"><span id="levelExample">7</span></span>;
<span style="color: #333399; font-weight: bold">var</span> generatorConfig = <span style="color: #008800; font-weight: bold">new</span> DifficultyLevels().GetConfig(seed, difficultyLevel);
<span style="color: #333399; font-weight: bold">var</span> testData = <span style="color: #008800; font-weight: bold">new</span> InputGenerator(generatorConfig).Generate();

<span style="color: #333399; font-weight: bold">var</span> result = <span style="color: #008800; font-weight: bold">new</span> MySubmission().Solve(testData.Input);
<span style="color: #333399; font-weight: bold">var</span> isValid = result == testData.Solution;
</pre>
                </div>
            </p>
        }
    }
}
