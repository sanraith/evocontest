@model IEnumerable<evorace.WebApp.Data.Match>

@{
    ViewData["Title"] = "Rankings";

    var lastMatch = Model.OrderByDescending(x => x.MatchDate).First();
    var orderedMeasurements = lastMatch.Measurements
        .OrderByDescending(x => x.MeasurementResultLazy.Value.Result.DifficultyLevel)
        .ThenBy(x => x.MeasurementResultLazy.Value.Result.TotalMilliseconds);
}
<script src="~/lib/chart.js/Chart.min.js"></script>

<h1>Rangsor</h1>

<canvas id="rankingsChart" width="400" height="400"></canvas>
<table id="rankingsTable" class="table table-responsive table-hover table-striped">
    <tr>
        <th style="text-align: center">
            #
        </th>
        <th>
            Készítő
        </th>
        <th style="text-align: center; max-width: 100px">
            Idő
        </th>
    </tr>
    @foreach (var (measurement, place) in orderedMeasurements.Select((x, i) => (x, i + 1)))
    {
        <tr>
            <td style="font-weight: bold; font-size: 20px; vertical-align: middle; text-align: center">@place.</td>
            <td>@measurement.Submission.User.Email</td>
            <td>
                (@measurement.MeasurementResultLazy.Value.Result.DifficultyLevel)
                @measurement.MeasurementResultLazy.Value.Result.TotalMilliseconds ms

                <span style="display:none">
                    <input type="text" name="name" value="@measurement.Submission.User.Email" />
                    <input type="text" name="score" value="@(1000/measurement.MeasurementResultLazy.Value.Result.TotalMilliseconds*1000)" />
                </span>
            </td>
        </tr>
    }
</table>

<script>
    var labels = $("#rankingsTable input[name=name]").map(function () { return $(this).val(); }).toArray();
    var scores = $("#rankingsTable input[name=score]").map(function () { return parseFloat($(this).val()); }).toArray();

    var ctx = document.getElementById('rankingsChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Solved /1000s',
                data: scores,
                borderWidth: 1
            }]
        },
        options: {
            scales: { yAxes: [{ ticks: { beginAtZero: true } }] }
        }
    });
</script>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.MatchDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.JsonResult)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MatchDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JsonResult)
                </td>
            </tr>
        }
    </tbody>
</table>
