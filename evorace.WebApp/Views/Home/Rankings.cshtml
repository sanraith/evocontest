@using System.Globalization;
@model IEnumerable<evorace.WebApp.Data.Match>

@{
    ViewData["Title"] = "Rankings";

    var lastMatch = Model.OrderByDescending(x => x.MatchDate).First();
    var orderedMeasurements = lastMatch.Measurements
        .OrderByDescending(x => x.MeasurementResultLazy.Value.Result.DifficultyLevel)
        .ThenBy(x => x.MeasurementResultLazy.Value.Result.TotalMilliseconds);
}
<script src="~/lib/chart.js/Chart.min.js"></script>

<h1>Rangsor</h1>
<div style="display:flex">
    <div style="flex:50%">
        <table id="rankingsTable" class="table table-hover table-striped">
            <tr>
                <th style="text-align: center">#</th>
                <th>Készítő</th>
                <th style="text-align: center; max-width: 100px">Idő</th>
            </tr>
            @foreach (var (measurement, place) in orderedMeasurements.Select((x, i) => (x, i + 1)))
            {
                var result = measurement.MeasurementResultLazy.Value.Result;
                var solvedPerSecString = (1000 / result.TotalMilliseconds).ToString("#.####", CultureInfo.InvariantCulture);
                <tr>
                    <td style="font-weight: bold; font-size: 20px; vertical-align: middle; text-align: center">@place.</td>
                    <td>@measurement.Submission.User.Email</td>
                    <td>
                        (@result.DifficultyLevel)
                        @result.TotalMilliseconds ms

                        <span style="display:none">
                            <input type="text" name="name" value="@measurement.Submission.User.Email" />
                            <input type="text" name="score" value="@solvedPerSecString" />
                        </span>
                    </td>
                </tr>
            }
        </table>
    </div>

    <div style="flex:50%">
        <canvas id="rankingsChart" />
    </div>
</div>

<script>
    var labels = $("#rankingsTable input[name=name]").map((_, x) => $(x).val()).toArray();
    var scores = $("#rankingsTable input[name=score]").map((_, x) => parseFloat($(x).val())).toArray();

    var ctx = document.getElementById('rankingsChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Solved/sec',
                data: scores,
                borderWidth: 1,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ]
            }]
        },
        options: {
            scales: { yAxes: [{ ticks: { beginAtZero: true } }] }
        }
    });
</script>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.MatchDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.JsonResult)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MatchDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JsonResult)
                </td>
            </tr>
        }
    </tbody>
</table>
